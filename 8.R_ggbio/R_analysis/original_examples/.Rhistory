ideoCyto$hg19["seqnames"]
ideoCyto$hg19@seqnames
knitr::opts_chunk$set(echo = TRUE)
data(ideoCyto, package = "biovizBase")  # This loads hg19, hg18, mm10 and mm9
hg19_GR <- ideoCyto$hg19  # Select hg19 only
autoplot(seqinfo(hg19_GR), layout = "karyogram")
data(ideoCyto, package = "biovizBase")  # This loads hg19, hg18, mm10 and mm9
hg19_GR <- ideoCyto$hg19  # Select hg19 only
autoplot(seqinfo(hg19_GR), layout = "karyogram")
data(ideoCyto, package = "biovizBase")  # This loads hg19, hg18, mm10 and mm9
hg19_GR <- ideoCyto$hg19  # Select hg19 only
autoplot(seqinfo(hg19_GR), layout = "karyogram")
?seqinfo
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: Loading packages 1
if (!require(BiocManager)) install.packages("BiocManager")
installifnot <- function (pkg){
if (!require(pkg, character.only=T)){
BiocManager::install(pkg)
}
}
# BiocManager::install() # Update installed packages
if (!(require(ggbio))) installed.packages("ggbio")
if (!(require(ggplot2))) installed.packages("ggplot2")
if (!require(Biostrings)) installed.packages("Biostrings")
# Chunk 3: Loading packages 2
require(ggbio)
require(ggplot2)
# Chunk 4
data(ideoCyto, package = "biovizBase")  # This loads hg19, hg18, mm10 and mm9
hg19_GR <- ideoCyto$hg19  # Select hg19 only
autoplot(seqinfo(hg19_GR), layout = "karyogram")
if (!require(dplyr)) installed.packages("dplyr")
L_inf_chr_ranges <- read.csv("./L_infantum_seq_lengths.csv", sep=",", header=TRUE)
View(L_inf_chr_ranges)
View(L_inf_chr_ranges)
class(hg19_GR)
print(L_inf_chr_ranges$chr)  # Print chromosome names)
L_inf_chr_ranges$seq_length
class(L_inf_chr_ranges$seq_length)
test <- c(L_inf_chr_ranges$seq_name)
test
class(test)
str(L_inf_chr_ranges)
View(hg19_GR)
hg19_GR@seqnames
hg19_GR@ranges
hg19_GR@strand
hg19_GR@strand@lengths
L_inf_GR <- GRanges(
seqnames = L_inf_chr_ranges$seqnames,
ranges = IRanges(
start = rep(1, length(L_inf_chr_ranges$seqnames)),
end = L_inf_chr_ranges$length
)
)
View(L_inf_GR)
L_inf_GR <- GRanges(
seqnames = L_inf_chr_ranges$seqnames,
ranges = IRanges(
start = rep(1, length(L_inf_chr_ranges$seqnames)),
end = L_inf_chr_ranges$length
)
)
L_inf_GR@seqnames
L_inf_GR <- GRanges(
seqnames = c(L_inf_chr_ranges$seqnames),
ranges = IRanges(
start = rep(1, length(L_inf_chr_ranges$seqnames)),
end = L_inf_chr_ranges$length
)
)
L_inf_GR@seqnames
L_inf_chr_ranges$seq_name
Linf_data <- read.csv("./L_infantum_seq_lengths.csv", sep=",", header=TRUE)  # Load data
rm L_inf_chr_ranges
rm(L_inf_chr_ranges)
Linf_data <- read.csv("./L_infantum_seq_lengths.csv", sep=",", header=TRUE)  # Load data
print(GRanges)
rm(L_inf_GR)
Linf_GR <- GRanges(
seqnames = Linf_data$seqnames,
ranges = IRanges(
start = rep(1, length(Linf_data$seqnames)),
end = Linf_data$length
),
strand = rep("*", nrow(Linf_data))
)
Linf_data$seq_name
length(Linf_data$seq_name)
Linf_GR <- GRanges(
seqnames = Linf_data$seqnames,
ranges = IRanges(
start = rep(1, length(Linf_data$seqnames)),
end = Linf_data$length
),
strand = rep("*", nrow(Linf_data))
)
Linf_GR <- GRanges(
seqnames = test,
ranges = IRanges(
start = rep(1, length(Linf_data$seqnames)),
end = Linf_data$length
),
strand = rep("*", nrow(Linf_data))
)
test
class(test)
class(c("chr1", "chr2", "chr3"))
type(c("chr1", "chr2", "chr3"))
typeof(c("chr1", "chr2", "chr3"))
test2 <- makeGRangesFromDataFrame(Linf_data)
View(Linf_data)
Linf_GR <- GRanges(
seqnames = Rle(Linf_data$seqnames),
ranges = IRanges(
start = rep(1, length(Linf_data$seqnames)),
end = Linf_data$length
),
strand = rep("*", nrow(Linf_data))
)
Linf_GR <- GRanges(
seqnames = Rle(Linf_data$seqnames, lengths = nrow(Linf_data))),
Linf_GR <- GRanges(
seqnames = Rle(Linf_data$seqnames, lengths = nrow(Linf_data)),
ranges = IRanges(
start = rep(1, length(Linf_data$seqnames)),
end = Linf_data$length
),
strand = rep("*", nrow(Linf_data))
)
Linf_GR <- GRanges(
seqnames = Rle(Linf_data$seqnames, seq(1, length(Linf_data$seqnames))),
ranges = IRanges(
start = rep(1, length(Linf_data$seqnames)),
end = Linf_data$length
),
strand = rep("*", nrow(Linf_data))
)
Linf_data <- read.csv("./L_infantum_seq_lengths.csv", sep=",", header=TRUE)  # Load data
Linf_GR <- GRanges(
seqnames = Rle(Linf_data$seqnames, seq(1, length(Linf_data$seqnames))),
ranges = IRanges(
start = rep(1, length(Linf_data$seqnames)),
end = Linf_data$length
),
strand = rep("*", nrow(Linf_data))
)
gr <- GRanges(
seqnames = Rle(c("chr1", "chr2", "chr1", "chr3"), c(1, 3, 2, 4)),
ranges = IRanges(101:110, end = 111:120, names = head(letters, 10)),
strand = Rle(strand(c("-", "+", "*", "+", "-")), c(1, 2, 2, 3, 2)),
score = 1:10,
GC = seq(1, 0, length=10))
gr
101:110
seq(1, length(Linf_data$seqnames))
seq(1, length(Linf_data))
nwor(Linf_data)
nrow(Linf_data)
Linf_GR <- GRanges(
seqnames = Rle(Linf_data$seqnames, seq(1, nrow(Linf_data)),
ranges = IRanges(
start = rep(1, length(Linf_data$seqnames)),
end = Linf_data$length
),
strand = rep("*", nrow(Linf_data))
)
print(Linf_GR)
Linf_GR <- GRanges(
seqnames = Rle(Linf_data$seqnames, seq(1, nrow(Linf_data))),
ranges = IRanges(
start = rep(1, length(Linf_data$seqnames)),
end = Linf_data$length
),
strand = rep("*", nrow(Linf_data))
)
Linf_data$seqnames
Linf_GR <- GRanges(
seqnames = Rle(Linf_data$seq_name, seq(1, nrow(Linf_data))),
ranges = IRanges(
start = rep(1, length(Linf_data$seqnames)),
end = Linf_data$length
),
strand = rep("*", nrow(Linf_data))
)
Linf_GR <- GRanges(
seqnames = Rle(Linf_data$seq_name, seq(1, nrow(Linf_data))),
ranges = IRanges(
start = rep(1, length(Linf_data$seqnames)),
end = Linf_data$length
),
strand = rep("*", nrow(Linf_data))
)
Linf_data$seq_name
seq(1, nrow(Linf_data))
Linf_GR <- GRanges(
seqnames = Rle(Linf_data$seq_name, seq(1, nrow(Linf_data))),
ranges = IRanges(
start = rep(1, nrow(Linf_data)),
end = Linf_data$seq_length
),
strand = rep("*", nrow(Linf_data))
)
rep(1, nrow(Linf_data))
Linf_data$seq_length
Linf_GR <- GRanges(
seqnames = Rle(Linf_data$seq_name, seq(1, nrow(Linf_data))),
ranges = IRanges(
start = rep(1, nrow(Linf_data)),
end = Linf_data$seq_length
),
strand = rep("*", nrow(Linf_data))
)
Rle(Linf_data$seq_name, seq(1, nrow(Linf_data)))
Linf_GR <- GRanges(
seqnames = Rle(Linf_data$seq_name, rep(1, nrow(Linf_data))),
ranges = IRanges(
start = rep(1, nrow(Linf_data)),
end = Linf_data$seq_length
),
strand = rep("*", nrow(Linf_data))
)
print(Linf_GR)
View(Linf_GR)
autoplot(seqinfo(Linf_GR), layout = "karyogram")
autoplot(Linf_GR, layout = "karyogram")
Linf_GR <- GRanges(
seqnames = Rle(Linf_data$seq_name, rep(1, nrow(Linf_data))),
ranges = IRanges(
start = rep(1, nrow(Linf_data)),
end = Linf_data$seq_length
),
strand = rep("*", nrow(Linf_data))
)
seq_info <- Seqinfo(
seqnames = Linf_data$seq_name,
seqlengths = Linf_data$seq_length,
isCircular = rep(FALSE, nrow(Linf_data),
genome = "Linfantum")
)
seqinfo(Linf_GR) <- seq_info
print(Linf_GR)
Linf_GR <- GRanges(
seqnames = Rle(Linf_data$seq_name, rep(1, nrow(Linf_data))),
ranges = IRanges(
start = rep(1, nrow(Linf_data)),
end = Linf_data$seq_length
),
strand = rep("*", nrow(Linf_data))
)
seq_info <- Seqinfo(
seqnames = Linf_data$seq_name,
seqlengths = Linf_data$seq_length,
isCircular = rep(FALSE, nrow(Linf_data)),
genome = rep("Linf", nrow(Linf_data))
)
seqinfo(Linf_GR) <- seq_info
print(Linf_GR)
autoplot(seqinfo(Linf_GR), layout = "karyogram")
autoplot(seqinfo(Linf_GR), layout = "karyogram")
autoplot(seqinfo(Linf_GR), layout = "karyogram", cytobands=TRUE)
autoplot(seqinfo(hg19_GR), layout = "karyogram", cytobands=TRUE)
View(ideoCyto)
data(darned_hg19_subset500, package = "biovizBase")
dn <- darned_hg19_subset500
View(darned_hg19_subset500)
class(darned_hg19_subset500)
darned_hg19_subset500@seqnames
darned_hg19_subset500@ranges
darned_hg19_subset500@strand
darned_hg19_subset500@seqinfo
darned_hg19_subset500@elementMetadata
darned_hg19_subset500@seqnames
seqlevelsStyle(dn)
data(darned_hg19_subset500, package = "biovizBase")
dn <- darned_hg19_subset500
seqlevelsStyle(dn)
require(GenomicRanges)
seqlevelsStyle(dn)
seqlengths(dn)
View(dn)
seqlengths(ideoCyto$hg19)[names(seqlengths(dn))]
hg19_GR@seqnames
seqlengths(hg19_GR)
paste0("chr", c(1:22, "X"))
keepSeqlevels(dn, paste0("chr", c(1:22, "X")))
seqlevels(dn)
dn <- keepSeqlevels(dn, paste0("chr", c(1:22, "X"))
)
seqlevels(dn)
hg19_GR@metadata
hg19_GR@elementType
hg19_GR@elementMetadata
hg19_GR@seqinfo
hg19_GR@elementMetadata@rownames
hg19_GR@elementMetadata@nrows
hg19_GR@elementMetadata@elementType
hg19_GR@elementMetadata@elementMetadata
hg19_GR@elementMetadata@metadata
hg19_GR@elementMetadata@listData
dn@elementType
dn@elementMetadata@listData
dn@elementMetadata@rownames
dn@elementMetadata@nrows
dn@elementMetadata@elementType
dn@elementMetadata@elementMetadata
dn@elementMetadata@metadata
autoplot(dn, layout = "karyogram", aes(color = exReg, fill = exReg)
)
class(dn@elementMetadata@listData)
test <- dn@elementMetadata@listData
View(test)
test2 <- bind_rows(test)
View(test2)
str(test2$)
str(test2)
dn@seqnames@lengths
dn@ranges@start
autoplot(hg19_GR, layout = "karyogram")
autoplot(seqinfo(hg19_GR), layout = "karyogram")
autoplot(seqinfo(hg19_GR), layout = "karyogram", aes(color=gieStain))
autoplot(seqinfo(hg19_GR), layout = "karyogram", aes(color=gieStain, fill=gieStain))
data(darned_hg19_subset500, package = "biovizBase")
dn <- darned_hg19_subset500
View(dn)
hg19_GR@seqnames@values
dn@seqnames
autoplot(dn, layout = "karyogram")
hg19_GR@seqinfo@seqnames
hg19_GR@seqinfo@seqlengths
autoplot(seqinfo(dn), layout = "karyogram")
dn2 <- dn
View(dn2)
rm(dn2@seqinfo)
seqinfo(dn2) <- Seqinfo(seqnames = character(0), seqlengths = integer(0))
seqinfo(gr)
seqinfo(dn2) <- Seqinfo(seqnames = character(0), seqlengths = integer(0))
class(dn2)
typeof(dn2)
slot(dn2, "seqinfo") <- NA
dn2
dn2 <- GRange(
seqnames = dn@seqnames,
ranges = dn@ranges,
strand = dn@strand,
elementMetadata = dn@elementMetadata
)
dn2 <- GRanges(
seqnames = dn@seqnames,
ranges = dn@ranges,
strand = dn@strand,
elementMetadata = dn@elementMetadata
)
View(dn2)
dn2 <- GRanges(
seqnames = dn@seqnames,
ranges = dn@ranges,
strand = dn@strand,
elementMetadata = dn@elementMetadata
)
dn2 <- GRanges(
seqnames = dn@seqnames,
ranges = dn@ranges,
strand = dn@strand,
elementMetadata = dn@elementMetadata
)
dn3 <- GRanges(
seqnames = dn@seqnames,
ranges = dn@ranges,
strand = dn@strand,
elementMetadata = dn@elementMetadata
)
View(dn3)
autoplot(dn3, layout = "karyogram")
dn2 <- GRanges(
seqnames = dn@seqnames,
ranges = dn@ranges,
strand = dn@strand,
elementMetadata = dn@elementMetadata
)
dn3 <- GRanges(
seqnames = dn@seqnames,
ranges = dn@ranges,
strand = dn@strand,
)
View(dn3)
rm(dn3)
dn3 <- GRanges(
seqnames = dn@seqnames,
ranges = dn@ranges,
strand = dn@strand
)
View(dn3)
autoplot(dn3, layout = "karyogram")
dn3@elementMetadata@listData
dn3@elementMetadata@metadata
dn3@elementMetadata
dn3@seqnames@values
dn3@seqnames@lengths
seqlengths(dn3)
dn3@strand@lengths
dn3@ranges@start
dn3@seqnames@values
Linf_data$seq_name
Linf_data$seq_name[:2]
Linf_data$seq_name[,:2]
Linf_data$seq_name[0]
Linf_data$seq_name[1]
Linf_data$seq_name[1:2]
Linf_test <- GRanges(
seqnames = Rle(Linf_data$seq_name[1:2], rep(1, nrow(Linf_data[1:2]))),
ranges = IRanges(
start = rep(1, nrow(Linf_data[1:2])),
end = Linf_data$seq_length[1:2]
),
strand = rep("*", nrow(Linf_data[1:2]))
)
nrow(Linf_data[1:2]))
nrow(Linf_data[1:2])
Linf_data$seq_length[1:2]
Linf_test <- GRanges(
seqnames = Rle(Linf_data$seq_name[1:2], rep(1, 2)),
ranges = IRanges(
start = rep(1, 2),
end = Linf_data$seq_length[1:2]
),
strand = rep("*", 2)
)
seq_info <- Seqinfo(
seqnames = Linf_data$seq_name[1:2],
seqlengths = Linf_data$seq_length[1:2],
isCircular = rep(FALSE, 2),
genome = rep("Linf", 2)
)
seqinfo(Linf_test) <- seq_info
print(Linf_test)
autoplot(seqinfo(Linf_test), layout = "karyogram")
View(Linf_test)
dn3@seqnames@values
c(rep(1,4), rep(1,2))
Linf_data$seq_length[1:2]
278267/2
Linf_test2<- GRanges(
seqnames = Rle(c("LinJ.01", "LinJ.01", "LinJ.01", "LinJ.01", "LinJ.02", "LinJ.02"), c(rep(1,4), rep(1,2))),
ranges = IRanges(
start = c(1, 5000, 139133, 270000, 350000, 355000),
end = c(1+800, 5000+800, 139133+800, 270000+800, 350000+800, 355000+800)
),
strand = rep("*", 6)
)
seq_info <- Seqinfo(
seqnames = Linf_data$seq_name[1:2],
seqlengths = Linf_data$seq_length[1:2],
isCircular = rep(FALSE, 2),
genome = rep("Linf", 2)
)
seqinfo(Linf_test2) <- seq_info
print(Linf_test2)
autoplot(seqinfo(Linf_test2), layout = "karyogram")
autoplot(seqinfo(Linf_test2), layout = "karyogram")
autoplot(Linf_test2, layout = "karyogram")
View(test)
test[["exReg"]]
save.image("~/Documents/Scripts/R/ggbio_testing/saved_environment.RData")
setwd("~/Documents/Scripts/R/ggbio_testing/original_examples")
rm(list = ls())
require(ggbio)
load("~/Documents/Scripts/R/ggbio_testing/original_examples/.RData")
View(dn)
dn@elementMetadata
dn@elementMetadata@listData
View(test)
View(test2)
View(dn)
## let's remove the NA value
dn.nona <- dn[!is.na(dn$exReg)]
## compute levels based on categories
dn.nona$levels <- as.numeric(factor(dn.nona$exReg))
## do a trcik show them at different height
p.ylim <- autoplot(dn.nona, layout = "karyogram", aes(color = exReg, fill = exReg,
ymin = (levels - 1) * 10/3,
ymax = levels * 10 /3))
data(darned_hg19_subset500, package = "biovizBase")
dn <- darned_hg19_subset500
library(GenomicRanges)
seqlengths(dn)
seqlengths(dn) <- seqlengths(ideoCyto$hg19)[names(seqlengths(dn))]
## then we change order
dn <- keepSeqlevels(dn, paste0("chr", c(1:22, "X")))
autoplot(dn, layout = "karyogram")
dn.nona <- dn[!is.na(dn$exReg)]
## compute levels based on categories
dn.nona$levels <- as.numeric(factor(dn.nona$exReg))
## do a trcik show them at different height
p.ylim <- autoplot(dn.nona, layout = "karyogram", aes(color = exReg, fill = exReg,
ymin = (levels - 1) * 10/3,
ymax = levels * 10 /3))
## prepare the data
dn3 <- dn.nona[dn.nona$exReg == '3']
dn5 <- dn.nona[dn.nona$exReg == '5']
dnC <- dn.nona[dn.nona$exReg == 'C']
dn.na <- dn[is.na(dn$exReg)]
## now we have 4 different data sets
autoplot(seqinfo(dn3), layout = "karyogram") +
layout_karyogram(data = dn3, geom = "rect", ylim = c(0, 10/3), color = "#7fc97f") +
layout_karyogram(data = dn5, geom = "rect", ylim = c(10/3, 10/3*2), color = "#beaed4") +
layout_karyogram(data = dnC, geom = "rect", ylim = c(10/3*2, 10), color = "#fdc086") +
layout_karyogram(data = dn.na, geom = "rect", ylim = c(10, 10/3*4), color = "brown")
View(dn.nona)
View(dn3)
